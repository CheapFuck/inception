networks:
  inception:
    driver: bridge
services:
  nginx:
    container_name: nginx
    build:
      context: .  # Set the context to the parent directory (my_project)
      dockerfile: containers/nginx/Dockerfile  # Point to the Dockerfile inside containers/nginx
    ports:
      - "443:443"
      # - "80:80"
    volumes:
      - data:/var/www/html  # Persist WordPress data
      # - ./nginx.conf:/etc/nginx/nginx.conf  # Nginx config
      # - ./ssl/cert.pem:/etc/ssl/certs/cert.pem  # SSL cert
      # - ./ssl/my_key.key:/etc/ssl/private/my_key.key  # SSL key
    networks:
      - inception
    restart: always
    depends_on:
      - wordpress
  mariadb:
    container_name: mariadb
    build:
      context: .  # Set the context to the parent directory (my_project)
      dockerfile: containers/mariadb/Dockerfile  # Point to the WordPress Dockerfile
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}  # Root password for the database
      MYSQL_DATABASE: ${MYSQL_DATABASE}  # Name of the database to create on startup
      MYSQL_USER: ${MYSQL_USER}  # Create a user with privileges
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}  # Password for the user
    volumes:
      - mariadb_data:/var/lib/mysql  # Persist data between container restarts
      - ./containers/mariadb/my.cnf:/etc/mysql/my.cnf
    networks:
      - inception
    restart: always
    healthcheck:
      test: ["CMD", "mariadb-admin", "ping", "-h", "localhost"]
      interval: 5s
      timeout: 5s
      retries: 5
    # ports:
    #   - "3306:3306"  # Expose port 3306 to the host for MariaDB connections
  wordpress:
    container_name: wordpress
    build:
      context: .  # Set the context to the parent directory (my_project)
      dockerfile: containers/wordpress/Dockerfile  # Point to the WordPress Dockerfile
    environment:
      WORDPRESS_DB_HOST: ${WORDPRESS_DB_HOST}  # Database service to connect to
      WORDPRESS_DB_NAME: ${WORDPRESS_DB_NAME}  # Database name
      WORDPRESS_DB_USER: ${WORDPRESS_DB_USER}  # Database user
      WORDPRESS_DB_PASSWORD: ${WORDPRESS_DB_PASSWORD}  # Database user password
      WP_USER: ${WP_USER}
      WP_URL: ${WP_URL}
      WP_USER_PASS: ${WP_USER_PASS}
      WP_EMAIL: ${WP_EMAIL}
      WP_TITLE: ${WP_TITLE}
      WP_ADMIN: ${WP_ADMIN}
      WP_ADMIN_PW: ${WP_ADMIN_PW}
      WP_ADMIN_EMAIL: ${WP_ADMIN_EMAIL}
      AUTH_KEY: ${AUTH_KEY}
      SECURE_AUTH_KEY: ${SECURE_AUTH_KEY}
      LOGGED_IN_KEY: ${LOGGED_IN_KEY}
      NONCE_KEY: ${NONCE_KEY}
      AUTH_SALT: ${AUTH_SALT}
      SECURE_AUTH_SALT: ${SECURE_AUTH_SALT}
      LOGGED_IN_SALT: ${LOGGED_IN_SALT}
      NONCE_SALT: ${NONCE_SALT}
      MY_TEST_VARIABLE: ${MY_TEST_VARIABLE}
    volumes:
      - data:/var/www/html  # Persist WordPress data
      # - /home/thivan-d/data/wordpress:/var/www/html/wordpress
      # - /home/thivan-d/data:/var/www/html
    networks:
      - inception
    depends_on:
      mariadb:
        condition: service_healthy
    restart: always
  ftp:
    container_name: ftp
    restart: always
    # ports:
    #   - "21:21"
    #   - "21100-21110:21100-21110"
    build:
      context: .  # Set the context to the parent directory (my_project)
      dockerfile: containers/ftp/Dockerfile  # Point to the WordPress Dockerfile
      args:
        FTP_USER: ${FTP_USER}
        FTP_PASS: ${FTP_PASS}
        # PASV_ADDRESS: ${PASV_ADDRESS}
        # PASV_MIN_PORT: ${PASV_MIN_PORT}
        # PASV_MAX_PORT: ${PASV_MAX_PORT}
    environment:
    #   - FTP_USER=${FTP_USER}
    #   - FTP_PASS=${FTP_PASS}
      - PASV_ADDRESS=${PASV_ADDRESS}
      - PASV_MIN_PORT=${PASV_MIN_PORT}
      - PASV_MAX_PORT=${PASV_MAX_PORT}
    healthcheck:
      test: ["CMD-SHELL", "pgrep pure-ftpd && lsof -i :21"]
      interval: 30s
      timeout: 5s
      retries: 3
    volumes:
      - data:/var/www/html
    networks:
      - inception 
  redis:
    build:
      context: .  # Set the context to the parent directory (my_project)
      dockerfile: containers/redis/Dockerfile  # Point to the WordPress Dockerfile
    container_name: redis
    restart: always
    networks:
      - inception
    # ports:
    #   - "6379:6379"  # Optional unless you want to connect from the host
    volumes:
      - redis-data:/data
      - ./containers/redis/data:/data  # Mount the host directory to persist Redis data
      - ./containers/redis/redis.conf:/usr/local/etc/redis/redis.conf  # Mount your custom redis.conf
    # command: ["redis-server", "/usr/local/etc/redis/redis.conf"]  # Start Redis with the custom config
  adminer:
    container_name: adminer
    restart: always
    # ports:
    #   - "8080:8080"
    build:
      context: .  # Set the context to the parent directory (my_project)
      dockerfile: containers/adminer/Dockerfile  # Point to the WordPress Dockerfile
    volumes:
      - data:/var/www/html
    networks:
      - inception 
  peercoind:
    container_name: peercoin
    build:
      context: .  # Set the context to the parent directory (my_project)
      dockerfile: containers/peercoin/Dockerfile  # Point to the WordPress Dockerfile    restart: always
    # image: peercoind:next
    environment:
      - PPC_DATA=${PPC_DATA}
      - RPC_PASSWORD=${RPC_PASSWORD}
      - RPC_USER=${RPC_USER}
    volumes:
      - data:/data
    # command:
    #   -nominting
    #   -rpcbind=0.0.0.0
    #   -rpcallowip=0.0.0.0/0
    ports:
      - '19901:9901'
      - '19903:9903'
    networks:
      - inception 
volumes:
  data:
    driver: local
    driver_opts:
      type: none
      device: /home/___USERNAME___/data
      o: bind
  mariadb_data:
    driver: local
    driver_opts:
      type: none
      device: /home/___USERNAME___/data/mariadb
      o: bind

      