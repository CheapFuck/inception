networks:
  inception:
    driver: bridge
services:
  nginx:
    container_name: nginx
    build:
      context: .  # Set the context to the parent directory (my_project)
      dockerfile: containers/nginx/Dockerfile  # Point to the Dockerfile inside containers/nginx
    ports:
      - "443:443"
      # - "80:80"
    volumes:
      - wordpress_data:/var/www/html  # Persist WordPress data
      # - ./nginx.conf:/etc/nginx/nginx.conf  # Nginx config
      # - ./ssl/cert.pem:/etc/ssl/certs/cert.pem  # SSL cert
      # - ./ssl/my_key.key:/etc/ssl/private/my_key.key  # SSL key
    networks:
      - inception
    restart: always
    depends_on:
      - wordpress
  mariadb:
    container_name: mariadb
    build:
      context: .  # Set the context to the parent directory (my_project)
      dockerfile: containers/mariadb/Dockerfile  # Point to the WordPress Dockerfile
    environment:
      MYSQL_ROOT_PASSWORD: root_password  # Root password for the database
      MYSQL_DATABASE: my_database  # Name of the database to create on startup
      MYSQL_USER: my_user  # Create a user with privileges
      MYSQL_PASSWORD: my_password  # Password for the user
    volumes:
      - mariadb_data:/var/lib/mysql  # Persist data between container restarts
      - ./containers/mariadb/my.cnf:/etc/mysql/my.cnf
    networks:
      - inception
    restart: always
    healthcheck:
      test: ["CMD", "mariadb-admin", "ping", "-h", "localhost"]
      interval: 5s
      timeout: 5s
      retries: 5
    # ports:
    #   - "3306:3306"  # Expose port 3306 to the host for MariaDB connections
  wordpress:
    container_name: wordpress
    build:
      context: .  # Set the context to the parent directory (my_project)
      dockerfile: containers/wordpress/Dockerfile  # Point to the WordPress Dockerfile
    environment:
      WORDPRESS_DB_HOST: mariadb:3306  # Database service to connect to
      WORDPRESS_DB_NAME: my_database  # Database name
      WORDPRESS_DB_USER: my_user  # Database user
      WORDPRESS_DB_PASSWORD: my_password  # Database user password
    volumes:
      - wordpress_data:/var/www/html  # Persist WordPress data
    networks:
      - inception
    depends_on:
      mariadb:
        condition: service_healthy
    restart: always
  ftp:
    container_name: ftp
    restart: always
    ports:
      - "21:21"
      - "21100-21110:21100-21110"
    build:
      context: .  # Set the context to the parent directory (my_project)
      dockerfile: containers/ftp/Dockerfile  # Point to the WordPress Dockerfile
    environment:
      - FTP_USER=ftpuser
      - FTP_PASS=ftppassword
      - PASV_ADDRESS=localhost
      - PASV_MIN_PORT=21100
      - PASV_MAX_PORT=21110
    healthcheck:
      test: ["CMD-SHELL", "pgrep pure-ftpd && lsof -i :21"]
      interval: 30s
      timeout: 5s
      retries: 3
    volumes:
      - wordpress_data:/var/www/html
    networks:
      - inception 
  redis:
    build:
      context: .  # Set the context to the parent directory (my_project)
      dockerfile: containers/redis/Dockerfile  # Point to the WordPress Dockerfile
    container_name: redis
    restart: always
    networks:
      - inception
    ports:
      - "6379:6379"  # Optional unless you want to connect from the host
    volumes:
    - /containers/redis/redis.conf:/usr/local/etc/redis/redis.conf  # Mount your custom redis.conf
    - /containers/redis/data:/data  # Mount the host directory to persist Redis data
    # command: ["redis-server", "/usr/local/etc/redis/redis.conf"]  # Start Redis with the custom config

volumes:
  mariadb_data:  # Declare the named volume for MariaDB data
  wordpress_data:  # Declare the named volume for WordPress data
